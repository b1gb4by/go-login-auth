// Code generated by MockGen. DO NOT EDIT.
// Source: repository/login_auth_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "api/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginAuthenticationRepository is a mock of LoginAuthenticationRepository interface.
type MockLoginAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginAuthenticationRepositoryMockRecorder
}

// MockLoginAuthenticationRepositoryMockRecorder is the mock recorder for MockLoginAuthenticationRepository.
type MockLoginAuthenticationRepositoryMockRecorder struct {
	mock *MockLoginAuthenticationRepository
}

// NewMockLoginAuthenticationRepository creates a new mock instance.
func NewMockLoginAuthenticationRepository(ctrl *gomock.Controller) *MockLoginAuthenticationRepository {
	mock := &MockLoginAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockLoginAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginAuthenticationRepository) EXPECT() *MockLoginAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// SearchUser mocks base method.
func (m *MockLoginAuthenticationRepository) SearchUser(email string) (model.AcquisitionUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", email)
	ret0, _ := ret[0].(model.AcquisitionUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockLoginAuthenticationRepositoryMockRecorder) SearchUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockLoginAuthenticationRepository)(nil).SearchUser), email)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: repository/user_auth_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "api/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAuthenticationRepository is a mock of UserAuthenticationRepository interface.
type MockUserAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthenticationRepositoryMockRecorder
}

// MockUserAuthenticationRepositoryMockRecorder is the mock recorder for MockUserAuthenticationRepository.
type MockUserAuthenticationRepositoryMockRecorder struct {
	mock *MockUserAuthenticationRepository
}

// NewMockUserAuthenticationRepository creates a new mock instance.
func NewMockUserAuthenticationRepository(ctrl *gomock.Controller) *MockUserAuthenticationRepository {
	mock := &MockUserAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockUserAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthenticationRepository) EXPECT() *MockUserAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// SearchUser mocks base method.
func (m *MockUserAuthenticationRepository) SearchUser(userID string) (model.AcquisitionUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", userID)
	ret0, _ := ret[0].(model.AcquisitionUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockUserAuthenticationRepositoryMockRecorder) SearchUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockUserAuthenticationRepository)(nil).SearchUser), userID)
}
